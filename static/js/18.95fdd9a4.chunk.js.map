{"version":3,"file":"static/js/18.95fdd9a4.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","pages/Home/HomePage.jsx","service/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MoviesListStyled = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { toast, Toaster } from 'react-hot-toast';\nimport ResponsivePagination from 'react-responsive-pagination';\nimport 'react-responsive-pagination/themes/classic.css';\nimport { useTranslation } from 'react-i18next';\n\nimport { getTrending } from 'service/api';\nimport { Loader, MovieListItem } from 'components/index';\n\nimport { StyledSection } from 'components/Section/Section.styled';\nimport { StyledContainer } from 'components/Container/Container.styled';\nimport { MoviesListStyled } from 'components/MoviesList/MoviesList.styled';\n\nconst HomePage = () => {\n  const { t } = useTranslation();\n  const location = useLocation();\n\n  const [movies, setMovies] = useState([]);\n  const [totalPages, setTotalPages] = useState(1);\n  const [currentPage, setCurrentPage] = useState(\n    location.state?.currentPage || 1,\n  );\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setIsLoading(true);\n\n        const trendMoviesData = await getTrending(currentPage);\n\n        setMovies(trendMoviesData.results);\n        setTotalPages(trendMoviesData.total_pages);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [currentPage]);\n\n  useEffect(() => {\n    if (error) {\n      toast.error(error);\n      setError(null);\n    }\n  }, [error]);\n\n  function handlePageChange(page) {\n    setCurrentPage(page);\n\n    // Scroll to the top of the page\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      <StyledSection style={{ flexGrow: 1 }}>\n        <StyledContainer>\n          <h1 style={{ marginBottom: '40px' }}>{t('homePageTitle')}</h1>\n\n          {Boolean(movies.length) && (\n            <>\n              <MoviesListStyled style={{ marginBottom: 40 }}>\n                {Boolean(movies.length > 0) &&\n                  movies.map(movie => {\n                    return (\n                      <MovieListItem\n                        {...movie}\n                        key={movie.id}\n                        currentPage={currentPage}\n                      />\n                    );\n                  })}\n              </MoviesListStyled>\n\n              {/*{movies.length > 20 && (*/}\n              <ResponsivePagination\n                total={totalPages}\n                current={currentPage}\n                onPageChange={page => handlePageChange(page)}\n              />\n              {/*)}*/}\n            </>\n          )}\n        </StyledContainer>\n      </StyledSection>\n\n      <Toaster />\n    </>\n  );\n};\n\nexport default HomePage;\n","import axios from 'axios';\nimport defaultImg from 'images/no-img.jpg';\n\nconst { REACT_APP_API_KEY, REACT_APP_BASE_URL, REACT_APP_BASE_URL_IMAGE } =\n  process.env;\n\nconst API_KEY = REACT_APP_API_KEY;\nconst BASE_URL = REACT_APP_BASE_URL;\nconst BASE_URL_IMAGE = REACT_APP_BASE_URL_IMAGE;\naxios.defaults.baseURL = BASE_URL;\n\nconst getTrending = async currentPage => {\n  const params = {\n    api_key: API_KEY,\n    page: currentPage,\n  };\n\n  const { data } = await axios.get('/trending/movie/day', {\n    params,\n  });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getImagePath(poster_path),\n  }));\n\n  data.results = results;\n  if (data.total_pages > 500) data.total_pages = 500;\n\n  return data;\n};\n\nconst searchMoviesByQuery = async ({ query, currentPage }) => {\n  const params = {\n    api_key: API_KEY,\n    query,\n    page: currentPage,\n  };\n\n  const { data } = await axios.get('/search/movie', { params });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getImagePath(poster_path),\n  }));\n\n  data.results = results;\n  if (data.total_pages > 500) data.total_pages = 500;\n\n  return data;\n};\n\nconst getMovieDetails = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`/movie/${movieId}`, {\n    params,\n  });\n\n  const {\n    poster_path,\n    title,\n    tagline,\n    adult,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    production_countries,\n  } = data;\n\n  return {\n    poster_path: getImagePath(poster_path),\n    title,\n    tagline,\n    adult,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    production_countries: production_countries\n      .map(country => country.name)\n      .join(', '),\n  };\n};\n\nconst getMovieCredits = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n\n  const cast = data.cast.map(({ profile_path, character, name }) => ({\n    profile_path: getImagePath(profile_path),\n    character,\n    name,\n  }));\n\n  return cast;\n};\n\nconst getMovieReviews = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n\n  const reviews = data.results.map(({ author, content }) => ({\n    author,\n    content,\n  }));\n\n  return reviews;\n};\n\nconst getImagePath = file_path => {\n  return file_path ? `${BASE_URL_IMAGE}${file_path}` : defaultImg;\n};\n\nexport {\n  getTrending,\n  searchMoviesByQuery,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n"],"names":["MoviesListStyled","styled","t","useTranslation","location","useLocation","useState","movies","setMovies","totalPages","setTotalPages","state","currentPage","setCurrentPage","isLoading","setIsLoading","error","setError","useEffect","getTrending","trendMoviesData","results","total_pages","message","toast","style","flexGrow","marginBottom","Boolean","length","map","movie","key","id","total","current","onPageChange","page","window","scrollTo","top","behavior","handlePageChange","process","API_KEY","REACT_APP_API_KEY","BASE_URL","REACT_APP_BASE_URL","BASE_URL_IMAGE","REACT_APP_BASE_URL_IMAGE","axios","params","api_key","data","title","poster_path","getImagePath","searchMoviesByQuery","query","getMovieDetails","movieId","tagline","adult","release_date","vote_average","overview","genres","production_countries","Date","getFullYear","toFixed","genre","name","join","country","getMovieCredits","cast","profile_path","character","getMovieReviews","reviews","author","content","file_path","defaultImg"],"sourceRoot":""}
{"version":3,"file":"static/js/3.4299f070.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","pages/Movies/MoviesPage.jsx","service/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MoviesListStyled = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { toast, Toaster } from 'react-hot-toast';\n\nimport { searchMoviesByQuery } from 'service/api';\nimport { Loader, MovieListItem, SearchForm } from 'components/index';\n\nimport { StyledSection } from 'components/Section/Section.styled';\nimport { StyledContainer } from 'components/Container/Container.styled';\nimport { MoviesListStyled } from 'components/MoviesList/MoviesList.styled';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n\n  const location = useLocation();\n\n  useEffect(() => {\n    if (searchQuery === null || searchQuery === '') return;\n\n    (async function () {\n      try {\n        setIsLoading(true);\n\n        const moviesByQuery = await searchMoviesByQuery(searchQuery);\n\n        if (!moviesByQuery.length) {\n          setError(`No movies found, please try another query.`);\n          setMovies([]);\n          return;\n        }\n\n        toast.success(`Found ${moviesByQuery.length} movies!`);\n\n        setMovies(moviesByQuery);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [searchQuery]);\n\n  useEffect(() => {\n    if (error) {\n      toast.error(error);\n      setError(null);\n    }\n  }, [error]);\n\n  const onSubmit = searchValue => {\n    setSearchParams({ query: searchValue });\n  };\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      <StyledSection style={{ paddingBottom: '0' }}>\n        <StyledContainer>\n          <SearchForm defaultValue={searchQuery} onSubmit={onSubmit} />\n        </StyledContainer>\n      </StyledSection>\n\n      <StyledSection>\n        <StyledContainer>\n          {!isLoading && !error && !movies.length && (\n            <p\n              style={{\n                textAlign: 'center',\n              }}\n            >\n              Sorry, there are no movies...\n            </p>\n          )}\n\n          {Boolean(movies.length) && (\n            <MoviesListStyled>\n              {movies.map(movie => {\n                return (\n                  <MovieListItem\n                    location={location}\n                    {...movie}\n                    key={movie.id}\n                  />\n                );\n              })}\n            </MoviesListStyled>\n          )}\n        </StyledContainer>\n      </StyledSection>\n\n      <Toaster />\n    </>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\nimport defaultImg from 'images/no-img.jpg';\n\nconst API_KEY = 'dea82e5d25cc68048d98e1915bc0a2dc';\nconst BASE_URL_IMAGE = 'https://image.tmdb.org/t/p/original';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst getTrending = async () => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get('/trending/movie/day', {\n    params,\n  });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getImagePath(poster_path),\n  }));\n\n  return results;\n};\n\nconst searchMoviesByQuery = async query => {\n  const params = {\n    api_key: API_KEY,\n    query,\n  };\n\n  const { data } = await axios.get('/search/movie', { params });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getImagePath(poster_path),\n  }));\n\n  return results;\n};\n\nconst getMovieDetails = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`/movie/${movieId}`, {\n    params,\n  });\n\n  const {\n    poster_path,\n    title,\n    tagline,\n    adult,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    production_countries,\n  } = data;\n\n  return {\n    poster_path: getImagePath(poster_path),\n    title,\n    tagline,\n    adult,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    production_countries: production_countries\n      .map(country => country.name)\n      .join(', '),\n  };\n};\n\nconst getMovieCredits = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n\n  const cast = data.cast.map(({ profile_path, character, name }) => ({\n    profile_path: getImagePath(profile_path),\n    character,\n    name,\n  }));\n\n  return cast;\n};\n\nconst getMovieReviews = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n\n  const reviews = data.results.map(({ author, content }) => ({\n    author,\n    content,\n  }));\n\n  return reviews;\n};\n\nconst getImagePath = file_path => {\n  return file_path ? `${BASE_URL_IMAGE}${file_path}` : defaultImg;\n};\n\nexport {\n  getTrending,\n  searchMoviesByQuery,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n"],"names":["MoviesListStyled","styled","useState","movies","setMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","searchQuery","get","location","useLocation","useEffect","searchMoviesByQuery","moviesByQuery","length","toast","message","style","paddingBottom","defaultValue","onSubmit","searchValue","query","textAlign","Boolean","map","movie","key","id","API_KEY","axios","getTrending","params","api_key","data","results","title","poster_path","getImagePath","getMovieDetails","movieId","tagline","adult","release_date","vote_average","overview","genres","production_countries","Date","getFullYear","toFixed","genre","name","join","country","getMovieCredits","cast","profile_path","character","getMovieReviews","reviews","author","content","file_path","defaultImg"],"sourceRoot":""}
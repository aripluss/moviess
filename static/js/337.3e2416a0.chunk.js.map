{"version":3,"file":"static/js/337.3e2416a0.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","pages/Movies/MoviesPage.jsx","service/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MoviesListStyled = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { toast, Toaster } from 'react-hot-toast';\nimport ResponsivePagination from 'react-responsive-pagination';\nimport 'react-responsive-pagination/themes/classic.css';\nimport { useTranslation } from 'react-i18next';\n\nimport { searchMoviesByQuery } from 'service/api';\nimport { Loader, MovieListItem, SearchForm } from 'components/index';\n\nimport { StyledSection } from 'components/Section/Section.styled';\nimport { StyledContainer } from 'components/Container/Container.styled';\nimport { MoviesListStyled } from 'components/MoviesList/MoviesList.styled';\n\nconst MoviesPage = () => {\n  const { t } = useTranslation();\n  const location = useLocation();\n\n  const [movies, setMovies] = useState([]);\n  const [totalPages, setTotalPages] = useState(1);\n  const [currentPage, setCurrentPage] = useState(\n    location.state?.currentPage || 1\n  );\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n\n  useEffect(() => {\n    if (!searchQuery || searchQuery === '') return;\n\n    (async () => {\n      try {\n        setIsLoading(true);\n\n        const queryData = { query: searchQuery, currentPage };\n\n        const moviesByQuery = await searchMoviesByQuery(queryData);\n\n        if (!moviesByQuery.results.length) {\n          setError(`No movies found, please try another query.`);\n          setMovies([]);\n          return;\n        }\n\n        if (currentPage === 1 && isSubmitted) {\n          toast.success(`Found ${moviesByQuery.total_results} movies!`);\n          setIsSubmitted(false);\n        }\n\n        setMovies(moviesByQuery.results);\n        setTotalPages(moviesByQuery.total_pages);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [currentPage, searchQuery, isSubmitted]);\n\n  useEffect(() => {\n    if (error) {\n      toast.error(error);\n      setError(null);\n    }\n  }, [error]);\n\n  const onSubmit = searchValue => {\n    setSearchParams({ query: searchValue });\n    setCurrentPage(1);\n    setIsSubmitted(true);\n  };\n\n  function handlePageChange(page) {\n    setCurrentPage(page);\n\n    // Scroll to the top of the page\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      <StyledSection style={{ paddingBottom: '0' }}>\n        <StyledContainer>\n          <SearchForm defaultValue={searchQuery} onSubmit={onSubmit} />\n        </StyledContainer>\n      </StyledSection>\n\n      <StyledSection style={{ flexGrow: 1 }}>\n        <StyledContainer>\n          {!isLoading && !error && !movies.length && (\n            <p style={{ textAlign: 'center' }}>{t('moviesPageNoMovies')} </p>\n          )}\n\n          {Boolean(movies.length) && (\n            <>\n              <MoviesListStyled style={{ marginBottom: 40 }}>\n                {movies.map(movie => {\n                  return (\n                    <MovieListItem\n                      location={location}\n                      {...movie}\n                      key={movie.id}\n                      currentPage={currentPage}\n                    />\n                  );\n                })}\n              </MoviesListStyled>\n\n              <ResponsivePagination\n                total={totalPages}\n                current={currentPage}\n                onPageChange={page => handlePageChange(page)}\n              />\n            </>\n          )}\n        </StyledContainer>\n      </StyledSection>\n\n      <Toaster />\n    </>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\nimport defaultImg from 'images/no-img.jpg';\n\nconst { REACT_APP_API_KEY, REACT_APP_BASE_URL, REACT_APP_BASE_URL_IMAGE } =\n  process.env;\n\nconsole.log(\n  '1',\n  REACT_APP_API_KEY,\n  '2',\n  REACT_APP_BASE_URL,\n  '3',\n  REACT_APP_BASE_URL_IMAGE\n);\n\nconst API_KEY = REACT_APP_API_KEY;\nconst BASE_URL_IMAGE = REACT_APP_BASE_URL_IMAGE;\naxios.defaults.baseURL = REACT_APP_BASE_URL;\n\nconst getTrending = async currentPage => {\n  const params = {\n    api_key: API_KEY,\n    page: currentPage,\n  };\n\n  const { data } = await axios.get('/trending/movie/day', {\n    params,\n  });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getImagePath(poster_path),\n  }));\n\n  data.results = results;\n  if (data.total_pages > 500) data.total_pages = 500;\n\n  return data;\n};\n\nconst searchMoviesByQuery = async ({ query, currentPage }) => {\n  const params = {\n    api_key: API_KEY,\n    query,\n    page: currentPage,\n  };\n\n  const { data } = await axios.get('/search/movie', { params });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getImagePath(poster_path),\n  }));\n\n  data.results = results;\n  if (data.total_pages > 500) data.total_pages = 500;\n\n  return data;\n};\n\nconst getMovieDetails = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`/movie/${movieId}`, {\n    params,\n  });\n\n  const {\n    poster_path,\n    title,\n    tagline,\n    adult,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    production_countries,\n  } = data;\n\n  return {\n    poster_path: getImagePath(poster_path),\n    title,\n    tagline,\n    adult,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    production_countries: production_countries\n      .map(country => country.name)\n      .join(', '),\n  };\n};\n\nconst getMovieCredits = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n\n  const cast = data.cast.map(({ profile_path, character, name }) => ({\n    profile_path: getImagePath(profile_path),\n    character,\n    name,\n  }));\n\n  return cast;\n};\n\nconst getMovieReviews = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n\n  const reviews = data.results.map(({ author, content }) => ({\n    author,\n    content,\n  }));\n\n  return reviews;\n};\n\nconst getImagePath = file_path => {\n  return file_path ? `${BASE_URL_IMAGE}${file_path}` : defaultImg;\n};\n\nexport {\n  getTrending,\n  searchMoviesByQuery,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n"],"names":["MoviesListStyled","styled","t","useTranslation","location","useLocation","useState","movies","setMovies","totalPages","setTotalPages","state","currentPage","setCurrentPage","isLoading","setIsLoading","error","setError","isSubmitted","setIsSubmitted","useSearchParams","searchParams","setSearchParams","searchQuery","get","useEffect","queryData","query","searchMoviesByQuery","moviesByQuery","results","length","toast","total_results","total_pages","message","style","paddingBottom","defaultValue","onSubmit","searchValue","flexGrow","textAlign","Boolean","marginBottom","map","movie","key","id","total","current","onPageChange","page","window","scrollTo","top","behavior","handlePageChange","process","REACT_APP_API_KEY","REACT_APP_BASE_URL","REACT_APP_BASE_URL_IMAGE","console","log","API_KEY","BASE_URL_IMAGE","axios","getTrending","params","api_key","data","title","poster_path","getImagePath","getMovieDetails","movieId","tagline","adult","release_date","vote_average","overview","genres","production_countries","Date","getFullYear","toFixed","genre","name","join","country","getMovieCredits","cast","profile_path","character","getMovieReviews","reviews","author","content","file_path","defaultImg"],"sourceRoot":""}
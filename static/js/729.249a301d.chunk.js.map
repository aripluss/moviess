{"version":3,"file":"static/js/729.249a301d.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetailsPage.styled.js","components/LinkButton/LinkButton.styled.js","pages/MovieDetails/MovieDetailsPage.jsx","service/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledMovieDetailsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n\n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n  }\n\n  .movie__poster {\n    width: 100%;\n    height: 100%;\n    border-radius: 10px;\n\n    @media screen and (min-width: 768px) {\n      width: 250px;\n    }\n\n    @media screen and (min-width: 1280px) {\n      width: 300px;\n    }\n  }\n\n  .movie__content {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n  }\n\n  & .movie__title-wrapper {\n    display: flex;\n    align-items: start;\n    justify-content: space-between;\n    gap: 20px;\n  }\n\n  & .movie__rating {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #ffde59;\n    color: #000;\n    border: 1px solid #ffde59;\n    border-radius: 10px;\n    padding: 6px 12px;\n    font-weight: 500;\n    box-shadow: 0 2px 6px rgb(0 0 0 / 10%);\n  }\n\n  & .movie__adult {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 1px solid red;\n    color: red;\n    border-radius: 10px;\n    padding: 6px 10px;\n    font-weight: 500;\n    box-shadow: 0 2px 6px rgb(0 0 0 / 10%);\n  }\n`;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const LinkButton = styled(NavLink)`\n  padding: 10px;\n  color: #8250df;\n  border: 1px solid #ffde59;\n  border-radius: 10px;\n  transition: background-color 0.3s ease;\n\n  &:hover,\n  &:focus-visible {\n    background-color: #ffde59;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\n\nimport { getMovieDetails } from 'service/api';\nimport { Loader } from 'components/index';\n\nimport { StyledMovieDetailsContainer } from './MovieDetailsPage.styled';\nimport { StyledSection } from 'components/Section/Section.styled';\nimport { StyledContainer } from 'components/Container/Container.styled';\nimport { LinkButton } from 'components/LinkButton/LinkButton.styled';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  const [movieDetails, setMovieDetails] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    (async function () {\n      try {\n        setIsLoading(true);\n\n        const movieDetails = await getMovieDetails(movieId);\n\n        setMovieDetails(movieDetails);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n  useEffect(() => {\n    if (error) {\n      alert(error);\n    }\n  }, [error]);\n\n  const isCastVisible = location.pathname.includes('cast');\n  const isReviewsVisible = location.pathname.includes('reviews');\n\n  const {\n    poster_path,\n    title,\n    tagline,\n    adult,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    production_countries,\n  } = movieDetails;\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      <StyledSection style={{ paddingBottom: '0' }}>\n        <StyledContainer>\n          <LinkButton to={location.state?.from ?? '/'}>Go back</LinkButton>\n\n          <StyledMovieDetailsContainer>\n            <img\n              className=\"movie__poster\"\n              alt={`${title} poster`}\n              src={poster_path}\n              loading=\"lazy\"\n            />\n            <div className=\"movie__content\">\n              <div className=\"movie__title-wrapper\">\n                <h1>{title}</h1>\n                {vote_average && (\n                  <div className=\"movie__rating\">{vote_average}</div>\n                )}\n                {adult && <div className=\"movie__adult\">18+</div>}\n              </div>\n              {tagline && <i>{tagline}</i>}\n              {release_date && (\n                <p>\n                  <b>Year:</b> <span>{release_date}</span>\n                </p>\n              )}\n              {genres && (\n                <p>\n                  <b>Genres:</b> <span>{genres}</span>\n                </p>\n              )}\n              {production_countries && (\n                <p>\n                  <b>Countries:</b> <span>{production_countries}</span>\n                </p>\n              )}\n              {overview && (\n                <p>\n                  <b>Overview:</b> <span>{overview}</span>\n                </p>\n              )}\n            </div>\n          </StyledMovieDetailsContainer>\n\n          <nav\n            style={{ display: 'flex', justifyContent: 'center', gap: '20px' }}\n          >\n            <LinkButton\n              state={{ from: location.state?.from ?? '/' }}\n              to={isCastVisible ? '' : 'cast'}\n            >\n              {isCastVisible ? 'Hide Cast' : 'Show Cast'}\n            </LinkButton>\n\n            <LinkButton\n              state={{ from: location.state?.from ?? '/' }}\n              to={isReviewsVisible ? '' : 'reviews'}\n            >\n              {isReviewsVisible ? 'Hide Reviews' : 'Show Reviews'}\n            </LinkButton>\n          </nav>\n        </StyledContainer>\n      </StyledSection>\n\n      <StyledSection>\n        <StyledContainer>\n          <Outlet />\n\n          {/* <Routes>\n            <Route path=\"cast\" element={<Cast />} />\n            <Route path=\"reviews\" element={<Reviews />} />\n          </Routes>\n\n          (without Layout) */}\n        </StyledContainer>\n      </StyledSection>\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n","import axios from 'axios';\nimport defaultImg from 'images/no-img.jpg';\n\nconst API_KEY = 'dea82e5d25cc68048d98e1915bc0a2dc';\nconst BASE_URL_IMAGE = 'https://image.tmdb.org/t/p/original';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst getTrending = async () => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get('/trending/movie/day', {\n    params,\n  });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getImagePath(poster_path),\n  }));\n\n  return results;\n};\n\nconst searchMoviesByQuery = async query => {\n  const params = {\n    api_key: API_KEY,\n    query,\n  };\n\n  const { data } = await axios.get('/search/movie', { params });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getImagePath(poster_path),\n  }));\n\n  return results;\n};\n\nconst getMovieDetails = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`/movie/${movieId}`, {\n    params,\n  });\n\n  const {\n    poster_path,\n    title,\n    tagline,\n    adult,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    production_countries,\n  } = data;\n\n  return {\n    poster_path: getImagePath(poster_path),\n    title,\n    tagline,\n    adult,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    production_countries: production_countries\n      .map(country => country.name)\n      .join(', '),\n  };\n};\n\nconst getMovieCredits = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n\n  const cast = data.cast.map(({ profile_path, character, name }) => ({\n    profile_path: getImagePath(profile_path),\n    character,\n    name,\n  }));\n\n  return cast;\n};\n\nconst getMovieReviews = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n\n  const reviews = data.results.map(({ author, content }) => ({\n    author,\n    content,\n  }));\n\n  return reviews;\n};\n\nconst getImagePath = file_path => {\n  return file_path ? `${BASE_URL_IMAGE}${file_path}` : defaultImg;\n};\n\nexport {\n  getTrending,\n  searchMoviesByQuery,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n"],"names":["StyledMovieDetailsContainer","styled","LinkButton","NavLink","movieId","useParams","location","useLocation","useState","movieDetails","setMovieDetails","isLoading","setIsLoading","error","setError","useEffect","getMovieDetails","message","alert","isCastVisible","pathname","includes","isReviewsVisible","poster_path","title","tagline","adult","release_date","vote_average","overview","genres","production_countries","style","paddingBottom","to","state","from","className","alt","src","loading","display","justifyContent","gap","API_KEY","axios","getTrending","params","api_key","data","results","map","id","getImagePath","searchMoviesByQuery","query","Date","getFullYear","toFixed","genre","name","join","country","getMovieCredits","cast","profile_path","character","getMovieReviews","reviews","author","content","file_path","defaultImg"],"sourceRoot":""}
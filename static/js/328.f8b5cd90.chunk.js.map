{"version":3,"file":"static/js/328.f8b5cd90.chunk.js","mappings":"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","sources":["pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx","service/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledCastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n\n  & .cast__card {\n    width: calc((100% - 20px) / 2);\n    height: auto;\n    border-radius: ${props => props.theme.radii.medium};\n\n    @media screen and (min-width: ${props => props.theme.breakpoints.md}) {\n      width: calc((100% - 60px) / 4);\n    }\n\n    @media screen and (min-width: ${props => props.theme.breakpoints.lg}) {\n      width: calc((100% - 100px) / 6);\n    }\n  }\n\n  & .cast__poster {\n    width: 100%;\n    height: 250px;\n    margin-bottom: 8px;\n    object-fit: cover;\n    border-radius: ${props => props.theme.radii.medium};\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast, Toaster } from 'react-hot-toast';\nimport { useTranslation } from 'react-i18next';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport 'react-lazy-load-image-component/src/effects/blur.css';\n\nimport { getMovieCredits } from 'service/api';\nimport { Loader } from 'components/index';\n\nimport { StyledCastList } from './Cast.styled';\n\nconst Cast = () => {\n  const { t } = useTranslation();\n\n  const [movieCast, setMovieCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    (async function () {\n      try {\n        setIsLoading(true);\n\n        const movieCast = await getMovieCredits(movieId);\n\n        setMovieCast(movieCast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n  useEffect(() => {\n    if (error) {\n      toast.error(error);\n      setError(null);\n    }\n  }, [error]);\n\n  return (\n    <div style={{ paddingTop: '40px' }}>\n      {isLoading && <Loader />}\n\n      {!isLoading && !error && !movieCast.length && (\n        <p\n          style={{\n            textAlign: 'center',\n          }}\n        >\n          {t('сastNoInformation')}\n        </p>\n      )}\n\n      {Boolean(movieCast.length) && (\n        <StyledCastList>\n          {movieCast.map(castMember => {\n            const { profile_path, character, name } = castMember;\n            return (\n              <li className=\"cast__card\" key={name}>\n                <LazyLoadImage\n                  className=\"cast__poster\"\n                  src={profile_path}\n                  alt={name}\n                  effect=\"blur\"\n                  wrapperProps={{ style: { display: 'block' } }}\n                />\n                <p>\n                  <b>{t('сastCharacter')}:</b> {character}\n                </p>\n                <p>\n                  <b>{t('сastName')}:</b> {name}\n                </p>\n              </li>\n            );\n          })}\n        </StyledCastList>\n      )}\n\n      <Toaster />\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport defaultImg from 'images/no-img.jpg';\n\nconst { REACT_APP_API_KEY, REACT_APP_BASE_URL, REACT_APP_BASE_URL_IMAGE } =\n  process.env;\n\nconst API_KEY = REACT_APP_API_KEY;\nconst BASE_URL_IMAGE = REACT_APP_BASE_URL_IMAGE;\naxios.defaults.baseURL = REACT_APP_BASE_URL;\n\nconst getTrending = async currentPage => {\n  const params = {\n    api_key: API_KEY,\n    page: currentPage,\n  };\n\n  if (localStorage.getItem('language') === 'ua') {\n    params.language = 'uk-UA';\n  }\n\n  const { data } = await axios.get('/trending/movie/day', {\n    params,\n  });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getImagePath(poster_path),\n  }));\n\n  data.results = results;\n  if (data.total_pages > 500) data.total_pages = 500;\n\n  return data;\n};\n\nconst searchMoviesByQuery = async ({ query, currentPage }) => {\n  const params = {\n    api_key: API_KEY,\n    query,\n    page: currentPage,\n  };\n\n  if (localStorage.getItem('language') === 'ua') {\n    params.language = 'uk-UA';\n  }\n\n  const { data } = await axios.get('/search/movie', { params });\n\n  const results = data.results.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path: getImagePath(poster_path),\n  }));\n\n  data.results = results;\n  if (data.total_pages > 500) data.total_pages = 500;\n\n  return data;\n};\n\nconst getMovieDetails = async movieId => {\n  const params = {\n    api_key: API_KEY,\n    append_to_response: 'videos',\n  };\n\n  if (localStorage.getItem('language') === 'ua') {\n    params.language = 'uk-UA';\n  }\n\n  const { data } = await axios.get(`/movie/${movieId}`, {\n    params,\n  });\n\n  const {\n    poster_path,\n    title,\n    tagline,\n    adult,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n    production_countries,\n    videos,\n  } = data;\n\n  const filteredVideos = videos.results.filter(\n    video => video.official === true\n  );\n\n  const newData = {\n    poster_path: getImagePath(poster_path),\n    title,\n    tagline,\n    adult,\n    release_date: new Date(release_date).getFullYear(),\n    vote_average: vote_average.toFixed(1),\n    overview,\n    genres: genres.map(genre => genre.name).join(', '),\n    production_countries: production_countries\n      .map(country => country.name)\n      .join(', '),\n    videos: filteredVideos,\n  };\n\n  return newData;\n};\n\nconst getMovieCredits = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  if (localStorage.getItem('language') === 'ua') {\n    params.language = 'uk-UA';\n  }\n\n  const { data } = await axios.get(`/movie/${movieId}/credits`, { params });\n\n  const cast = data.cast.map(({ profile_path, character, name }) => ({\n    profile_path: getImagePath(profile_path),\n    character,\n    name,\n  }));\n\n  return cast;\n};\n\nconst getMovieReviews = async movieId => {\n  const params = {\n    api_key: API_KEY,\n  };\n\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, { params });\n\n  const uniqueReviews = data.results.filter(\n    (review, idx, self) =>\n      idx === self.findIndex(r => r.content === review.content)\n  );\n\n  const reviews = uniqueReviews.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n\n  return reviews;\n};\n\nconst getImagePath = file_path => {\n  return file_path ? `${BASE_URL_IMAGE}${file_path}` : defaultImg;\n};\n\n// const getFilmVideos = async movieId => {\n//   const params = {\n//     api_key: API_KEY,\n//     language: localStorage.getItem('language') === 'ua' ? 'uk-UA' : 'en-US',\n//   };\n//\n//   const { results } = await axios.get(`/movie/${movieId}/videos`, { params });\n//\n//   return results;\n// };\n\nexport {\n  getTrending,\n  searchMoviesByQuery,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n"],"names":["StyledCastList","styled","props","theme","radii","medium","breakpoints","md","lg","t","useTranslation","useState","movieCast","setMovieCast","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","getMovieCredits","message","toast","style","paddingTop","length","textAlign","Boolean","map","castMember","profile_path","character","name","className","LazyLoadImage","src","alt","effect","wrapperProps","display","REACT_APP_BASE_URL","process","API_KEY","BASE_URL_IMAGE","axios","getTrending","currentPage","params","api_key","page","localStorage","getItem","language","data","results","id","title","poster_path","getImagePath","total_pages","searchMoviesByQuery","query","getMovieDetails","append_to_response","tagline","adult","release_date","vote_average","overview","genres","production_countries","videos","filteredVideos","filter","video","official","newData","Date","getFullYear","toFixed","genre","join","country","cast","getMovieReviews","uniqueReviews","review","idx","self","findIndex","r","content","reviews","author","file_path","defaultImg"],"sourceRoot":""}